{"version":3,"sources":["Components/Block.module.css","Components/PieceQueue.module.css","Components/HeldBlock.module.css","gameUI.module.css","Components/Grid.module.css","Components/HowToPlay.module.css","Components/Tetrimino.js","store/GameState.js","modules/piece-queue.js","Components/Block.js","Components/Grid.js","Components/PieceQueuePiece.js","Components/PieceQueue.js","Components/HeldBlock.js","modules/KeyControls.js","Components/HowToPlay.js","App.js","store/index.js","index.js"],"names":["module","exports","TETRIMINOS","I","T","L","J","Z","S","O","pieceArray","getRandomPiece","length","value","Math","floor","random","splice","getCoords","type","rotatePos","xPos","yPos","map","row","rowPos","col","colPos","x","y","convertMappingToCoords","state","mapping","forGhost","coordArray","array","coord","coordIsValid","push","removeLastState","currentCoords","grid","placeBlocks","colorName","currentShape","ghostCoords","currentCoord","pieceQueue","this","elements","head","tail","element","item","isEmpty","dequeue","gameStateSlice","createSlice","name","initialState","gameRunning","currentPieceState","totalLinesCleared","isGameWon","heldPiece","rotated","reducers","gameLoop","newGame","displayMessage","empty","gettingReady","i","enqueue","clearLines","newGrid","linesCleared","every","blockType","unshift","getNewPiece","console","log","rotatePiece","action","originalRotatePos","isCounterClockwise","payload","dropPiece","getGhostCoords","removeLastGhostPiece","ghostYPos","hardDrop","showGhostPiece","shiftLeft","shiftRight","checkIfGameWon","holdPiece","placeHolder","gameStateActions","actions","Block","props","color","className","styles","block","Grid","gameState","useSelector","slice","y_pos","x_pos","style","position","top","PieceQueuePiece","PieceQueue","pieces","pieceColor","HeldBlock","heldBlock","keyIsPressed","keyIsDisabled","keyShiftCounter","KeyControls","window","addEventListener","event","key","preventDefault","stopPropagation","HowToPlay","howToPlay","App","dispatch","useDispatch","useEffect","dropPieceInterval","setInterval","handleInputInterval","keyHandler","shiftInputInterval","keyShiftHandler","clearInterval","interval","document","onkeydown","keycode","gameUI","store","configureStore","reducer","gameStateReducer","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.b2bfd3f6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"Block_block__3nUuf\",\"None\":\"Block_None__eAiB9\",\"I\":\"Block_I__weOBk\",\"T\":\"Block_T__1L-Xu\",\"L\":\"Block_L__2ENJ9\",\"J\":\"Block_J__1832g\",\"Z\":\"Block_Z__2mhxn\",\"S\":\"Block_S__3hrCd\",\"O\":\"Block_O__1pSxP\",\"Ighost\":\"Block_Ighost__1nPus\",\"Tghost\":\"Block_Tghost__VDON1\",\"Lghost\":\"Block_Lghost__2f0AL\",\"Jghost\":\"Block_Jghost__1598_\",\"Zghost\":\"Block_Zghost__2bH4-\",\"Sghost\":\"Block_Sghost__18NWt\",\"Oghost\":\"Block_Oghost__2eXdj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pieceQueue\":\"PieceQueue_pieceQueue__1Znlf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"heldBlock\":\"HeldBlock_heldBlock__2MTTR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameUI\":\"gameUI_gameUI__26S52\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"Grid_grid__ZIllk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"howToPlay\":\"HowToPlay_howToPlay__OMoNR\"};","export const TETRIMINOS = {\n  I: [\n    //I\n    [\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n      [0, 0, 1, 0],\n    ],\n    [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n      [0, 0, 0, 0],\n    ],\n    [\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n      [0, 1, 0, 0],\n    ],\n  ],\n\n  T: [\n    //T\n    [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  L: [\n    //L\n    [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [1, 0, 0],\n    ],\n    [\n      [1, 1, 0],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  J: [\n    //J\n    [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 0],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 0],\n      [1, 1, 0],\n    ],\n  ],\n  Z: [\n    //Z\n    [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 0, 1],\n      [0, 1, 1],\n      [0, 1, 0],\n    ],\n    [\n      [0, 0, 0],\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 0],\n      [1, 1, 0],\n      [1, 0, 0],\n    ],\n  ],\n  S: [\n    //S\n    [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [0, 1, 0],\n      [0, 1, 1],\n      [0, 0, 1],\n    ],\n    [\n      [0, 0, 0],\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    [\n      [1, 0, 0],\n      [1, 1, 0],\n      [0, 1, 0],\n    ],\n  ],\n  O: [\n    //O\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n    [\n      [0, 1, 1],\n      [0, 1, 1],\n    ],\n  ],\n};\n\nexport const getRandomPiece = () => {\n  const value = Math.round(6 * Math.random());\n  switch (value) {\n    case 0:\n      return \"I\";\n    case 1:\n      return \"T\";\n    case 2:\n      return \"L\";\n    case 3:\n      return \"J\";\n    case 4:\n      return \"Z\";\n    case 5:\n      return \"S\";\n    case 6:\n      return \"O\";\n  }\n};\n\nexport const getPiece = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nexport const rotatePiece = (isCounterClockwise, { type, rotatePos }) => {\n  return isCounterClockwise\n    ? rotatePos === 0\n      ? TETRIMINOS[type].length - 1\n      : rotatePos - 1\n    : rotatePos === TETRIMINOS[type].length - 1\n    ? 0\n    : rotatePos + 1;\n};\n\nexport const convertMappingToCoords = (mapping) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        coordArray.push(coord);\n      }\n    }\n  }\n  return coordArray;\n};\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nimport { TETRIMINOS } from \"../Components/Tetrimino\";\n\nimport Queue from '../modules/piece-queue'\n\nlet pieceArray = [\n  \"I\",\n  \"I\",\n  \"T\",\n  \"T\",\n  \"L\",\n  \"L\",\n  \"J\",\n  \"J\",\n  \"Z\",\n  \"Z\",\n  \"S\",\n  \"S\",\n  \"O\",\n  \"O\",\n];\nconst getRandomPiece = () => {\n  if(pieceArray.length===0){\n    pieceArray = [\n      \"I\",\n      \"I\",\n      \"T\",\n      \"T\",\n      \"L\",\n      \"L\",\n      \"J\",\n      \"J\",\n      \"Z\",\n      \"Z\",\n      \"S\",\n      \"S\",\n      \"O\",\n      \"O\",\n    ];\n  }\n  const value = Math.floor(pieceArray.length * Math.random());\n  return pieceArray.splice(value,1)\n};\n\nconst getCoords = (type, rotatePos, xPos, yPos) =>\n  TETRIMINOS[type][rotatePos].map((row, rowPos) =>\n    row.map((col, colPos) => {\n      if (col) {\n        return { x: xPos + colPos, y: yPos + rowPos };\n      }\n      return null;\n    })\n  );\n\nconst rotatePiece = (isCounterClockwise, state) => {\n  let { rotatePos } = state;\n  if (isCounterClockwise) {\n    if (rotatePos === 0) {\n      return 3;\n    } else {\n      return rotatePos - 1;\n    }\n  } else {\n    if (rotatePos === 3) {\n      return 0;\n    } else {\n      return rotatePos + 1;\n    }\n  }\n};\n\nconst convertMappingToCoords = (state, mapping, forGhost = false) => {\n  let coordArray = [];\n  for (const array of mapping) {\n    for (const coord of array) {\n      if (coord) {\n        if (coordIsValid(state, coord, forGhost)) {\n          coordArray.push(coord);\n        }\n      }\n    }\n  }\n  return coordArray;\n};\n\nconst gameStateInitialState = {\n  gameRunning: false,\n  currentShape: null,\n  currentCoords: [],\n  ghostCoords: [],\n  currentPieceState: \"NONE\",\n  rotatePos: 0,\n  xPos: 3,\n  yPos: 0,\n  totalLinesCleared: 0,\n  grid: [\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n    [\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n      \"None\",\n    ],\n  ],\n  // winCondition:(state) =>{return state.totalLinesCleared >= 5},\n  pieceQueue: null,\n  isGameWon: false,\n  heldPiece: null,\n  rotated: false,\n\n};\n\nconst removeLastState = (state) => {\n  for (const coord of state.currentCoords) {\n    state.grid[coord.y][coord.x] = \"None\";\n  }\n};\n\nconst removeLastGhostPiece = (state) => {\n  for (const coord of state.ghostCoords) {\n    state.grid[coord.y][coord.x] = \"None\";\n  }\n};\n\nconst placeBlocks = (state, forGhost = false) => {\n  if (forGhost) {\n    const colorName = state.currentShape + \"ghost\";\n    for (const coord of state.ghostCoords) {\n      state.grid[coord.y][coord.x] = colorName;\n      for (const currentCoord of state.currentCoords) {\n        if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n          state.grid[coord.y][coord.x] = state.currentShape;\n        }\n      }\n    }\n  } else {\n    for (const coord of state.currentCoords) {\n      state.grid[coord.y][coord.x] = state.currentShape;\n    }\n  }\n};\n\nconst coordIsValid = (state, coord, forGhost = false) => {\n  if (coord) {\n    if (coord.y <= 20 && coord.x >= 0 && coord.x <= 9) {\n      for (let currentCoord of state.currentCoords) {\n        if (forGhost) {\n          if (currentCoord.y === coord.y && currentCoord.x === coord.x) {\n            return true;\n          }\n        }\n      }\n      if (state.grid[coord.y][coord.x].length > 1) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconst winCondition = (state) => state.totalLinesCleared > 4;\n\nexport let pieceQueue = new Queue()\n\nconst gameStateSlice = createSlice({\n  name: \"gameState\",\n  initialState: gameStateInitialState,\n  reducers: {\n    gameLoop(state){\n\n    },\n    newGame(state) {\n      pieceArray = [\n        \"I\",\n        \"I\",\n        \"T\",\n        \"T\",\n        \"L\",\n        \"L\",\n        \"J\",\n        \"J\",\n        \"Z\",\n        \"Z\",\n        \"S\",\n        \"S\",\n        \"O\",\n        \"O\",\n      ];\n      state.grid = [\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n        [\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ],\n      ];\n      state.xPos = 3;\n      state.yPos = 0;\n      state.rotatePos = 0;\n      state.totalLinesCleared= 0;\n      state.displayMessage = \"READY\"\n      state.currentPieceState = \"GETTING READY\"\n      pieceQueue.empty()\n      state.gameRunning = false;\n    },\n    gettingReady(state){\n      if (state.currentPieceState === \"GETTING READY\"){\n        state.currentPieceState = \"BEFORE START\"\n        state.displayMessage = \"GO!\"\n      }\n      else if (state.currentPieceState === \"BEFORE START\"){\n        state.displayMessage = null;\n        state.gameRunning = true;\n        state.currentShape = getRandomPiece();\n        for(let i = 0;i<5;i++){\n          pieceQueue.enqueue(...getRandomPiece())\n        }\n      }\n    },\n    clearLines(state) {\n      let newGrid = [];\n      let linesCleared = 0;\n      for (const row of state.grid) {\n        if (row.every((blockType) => blockType !== \"None\")) {\n          state.totalLinesCleared += 1;\n          linesCleared += 1;\n        } else {\n          newGrid.push(row);\n        }\n      }\n      for (let i = 0; i < linesCleared; i++) {\n        newGrid.unshift([\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n          \"None\",\n        ]);\n      }\n      state.grid = newGrid;\n    },\n    getNewPiece(state) {\n      if (!state.gameRunning) {\n        return;\n      }\n      state.ghostCoords = [];\n      state.rotated = false\n      state.currentShape = pieceQueue.dequeue();\n      pieceQueue.enqueue(...getRandomPiece())\n      state.xPos = 3;\n      state.yPos = 0;\n      state.rotatePos = 0;\n      state.currentCoords = convertMappingToCoords(\n        state,\n        getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n      );\n      if (state.currentCoords.length < 4) {\n        state.gameRunning = false;\n        console.log(\"lost\");\n        return;\n      }\n      placeBlocks(state);\n      state.currentPieceState = \"FALLING\";\n    },\n    rotatePiece(state, action) {\n      const originalRotatePos = state.rotatePos;\n      state.rotatePos = rotatePiece(action.payload, {\n        rotatePos: state.rotatePos,\n      });\n      removeLastState(state);\n      state.currentCoords = convertMappingToCoords(\n        state,\n        getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n      );\n      if (state.currentCoords.length < 4) {\n        state.rotatePos = originalRotatePos;\n        state.currentCoords = convertMappingToCoords(\n          state,\n          getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n        );\n      } else {\n        state.currentPieceState = \"FALLING\";\n      }\n      placeBlocks(state);\n    },\n    dropPiece(state) {\n      if (state.gameRunning) {\n        if (state.currentPieceState === \"LANDING\") {\n          state.currentPieceState = \"FROZEN\";\n          return;\n        }\n        removeLastState(state);\n        state.yPos += 1;\n        state.currentCoords = convertMappingToCoords(\n          state,\n          getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n        );\n        if (state.currentCoords.length < 4) {\n          state.yPos -= 1;\n          state.currentCoords = convertMappingToCoords(\n            state,\n            getCoords(\n              state.currentShape,\n              state.rotatePos,\n              state.xPos,\n              state.yPos\n            )\n          );\n          state.currentPieceState = \"LANDING\";\n        } else {\n          state.currentPieceState = \"FALLING\";\n        }\n        placeBlocks(state);\n      } else {\n      }\n    },\n    getGhostCoords(state) {\n      if (!state.gameRunning) {\n        return;\n      }\n      removeLastGhostPiece(state);\n      state.ghostCoords = [];\n      for (let coord of state.currentCoords) {\n        state.ghostCoords.push({ x: coord.x, y: coord.y });\n      }\n      let ghostYPos = state.yPos;\n      while (state.ghostCoords.length === 4) {\n        ghostYPos += 1;\n        state.ghostCoords = convertMappingToCoords(\n          state,\n          getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n          true\n        );\n      }\n      ghostYPos -= 1;\n      state.ghostCoords = convertMappingToCoords(\n        state,\n        getCoords(state.currentShape, state.rotatePos, state.xPos, ghostYPos),\n        true\n      );\n    },\n    hardDrop(state) {\n      removeLastState(state);\n      state.currentCoords = state.ghostCoords;\n      placeBlocks(state);\n      state.currentPieceState = \"FROZEN\";\n    },\n    showGhostPiece(state) {\n      if (!state.gameRunning) {\n        return;\n      }\n      placeBlocks(state, true);\n    },\n    shiftLeft(state) {\n      removeLastState(state);\n      state.xPos -= 1;\n      state.currentCoords = convertMappingToCoords(\n        state,\n        getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n      );\n      if (state.currentCoords.length < 4) {\n        state.xPos += 1;\n        state.currentCoords = convertMappingToCoords(\n          state,\n          getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n        );\n      } else {\n        state.currentPieceState = \"FALLING\";\n      }\n      placeBlocks(state);\n    },\n    shiftRight(state) {\n      removeLastState(state);\n      state.xPos += 1;\n      state.currentCoords = convertMappingToCoords(\n        state,\n        getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n      );\n      if (state.currentCoords.length < 4) {\n        state.xPos -= 1;\n        state.currentCoords = convertMappingToCoords(\n          state,\n          getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n        );\n      } else {\n        state.currentPieceState = \"FALLING\";\n      }\n      placeBlocks(state);\n    },\n    checkIfGameWon(state) {\n      if (state.totalLinesCleared >= 4) {\n        console.log(\"won\");\n        state.isGameWon = true;\n        state.gameRunning = false;\n      }\n    },\n    holdPiece(state){\n      if(state.rotated === true){\n        return\n      }\n      state.rotated = true;\n\n      \n      removeLastState(state);\n      if(state.heldPiece===null){\n        state.heldPiece = state.currentShape\n        state.currentShape = pieceQueue.dequeue();\n        pieceQueue.enqueue(...getRandomPiece())\n      }\n      else{\n        const placeHolder = state.currentShape\n        state.currentShape = state.heldPiece\n        state.heldPiece = placeHolder;\n      }\n      state.xPos = 3;\n      state.yPos = 0;\n      state.rotatePos = 0;\n      state.currentCoords = convertMappingToCoords(\n        state,\n        getCoords(state.currentShape, state.rotatePos, state.xPos, state.yPos)\n      );\n      placeBlocks(state);\n      state.currentPieceState = \"FALLING\";\n\n    },\n    placeBlocks(state){\n      \n    }\n\n    // setWinCondition(state,condition){\n    //   state.winCondition = condition;\n    // }\n  },\n});\n\nexport const gameStateActions = gameStateSlice.actions;\n\nexport default gameStateSlice.reducer;\n","export default class Queue {\n    constructor() {\n      this.elements = {};\n      this.head = 0;\n      this.tail = 0;\n    }\n    enqueue(element) {\n      this.elements[this.tail] = element;\n      this.tail++;\n    }\n    dequeue() {\n      const item = this.elements[this.head];\n      delete this.elements[this.head];\n      this.head++;\n      return item;\n    }\n    peek() {\n      return this.elements[this.head];\n    }\n    empty(){\n        while(!this.isEmpty){\n            this.dequeue()\n        }\n    }\n    get length() {\n      return this.tail - this.head;\n    }\n    get isEmpty() {\n      return this.length === 0;\n    }\n  }","import styles from \"./Block.module.css\";\n\nconst Block = (props) => {\n  const color = props.color;\n  return <td className={`${styles.block}  ${styles[color]}`}></td>;\n};\n\nexport default Block;\n","import { useSelector, useDispatch } from \"react-redux\";\n\nimport styles from \"./Grid.module.css\";\nimport Block from \"./Block\";\n\nconst Grid = (props) => {\n  const gameState = useSelector((state) => state.gameState);\n\n  const grid = gameState.grid.slice(1).map((row, y_pos) => {\n    return (\n      <tr key={y_pos}>\n        {row.map((color, x_pos) => {\n          return <Block color={color} key={x_pos} />;\n        })}\n      </tr>\n    );\n  });\n\n  return (\n    <table className={styles.grid}>\n      <tbody>{grid}</tbody>\n      <div  style={{ \"align-items\":\"center\",position: \"absolute\", top: 300,color:\"yellow\"}}>\n            {gameState.displayMessage}\n          </div>\n    </table>\n  );\n};\n\nexport default Grid;\n","import Block from \"./Block\";\nimport { TETRIMINOS } from \"./Tetrimino\";\n\nconst PieceQueuePiece = (props) => {\n  const convertToPiece = (row, yPos) => {\n    return (\n      <tr key={yPos}>\n        {row.map((color, xPos) => {\n          if (color === 0) {\n            return <Block key = {xPos} color={null} />;\n          } else {\n            return <Block color={props.color} key={xPos} />;\n          }\n        })}\n      </tr>\n    );\n  };\n  let grid = TETRIMINOS[props.color][0].map(convertToPiece);\n\n  return (\n    <li>\n      <table>\n        <tbody>{grid}</tbody>\n      </table>\n    </li>\n  );\n};\n\nexport default PieceQueuePiece;\n","import PieceQueuePiece from \"./PieceQueuePiece\";\nimport styles from './PieceQueue.module.css'\nimport {pieceQueue} from '../store/GameState'\n\nconst PieceQueue= (props) =>{\n    let i = 0\n    let pieces = []\n    if (pieceQueue.isEmpty){\n        return <ul className = {styles.pieceQueue}></ul>\n    }\n\n    for (let pieceColor in pieceQueue.elements){\n        pieces.push(<PieceQueuePiece key = {i++} color = {pieceQueue.elements[pieceColor]}/>)\n    }\n    return <ul className = {styles.pieceQueue}>{pieces}</ul>\n}\n\nexport default PieceQueue;","import styles from \"./HeldBlock.module.css\";\n\nimport { TETRIMINOS } from \"./Tetrimino\";\nimport { useSelector } from \"react-redux\";\nimport Block from \"./Block\";\n\nconst HeldBlock = () => {\n  const gameState = useSelector((state) => state.gameState);\n  if (!gameState.heldPiece) {\n    return (\n      <div className={styles.heldBlock}>\n        <table>\n          <tbody>\n            <tr>\n              <Block />\n              <Block />\n              <Block />\n              <Block />\n            </tr>\n            <tr>\n              <Block />\n              <Block />\n              <Block />\n              <Block />\n            </tr>\n            <tr>\n              <Block />\n              <Block />\n              <Block />\n              <Block />\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n\n  const convertToPiece = (row, yPos) => {\n    return (\n      <tr key={yPos}>\n        {row.map((color, xPos) => {\n          if (color === 0) {\n            return <Block key={xPos} color={null} />;\n          } else {\n            return <Block color={gameState.heldPiece} key={xPos} />;\n          }\n        })}\n      </tr>\n    );\n  };\n\n  let grid = TETRIMINOS[gameState.heldPiece][0].map(convertToPiece);\n  console.log(grid);\n  return (\n    <div className={styles.heldBlock}>\n      <table>\n        <tbody>{grid}</tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default HeldBlock;\n","export let keyIsPressed = {};\nexport let keyIsShifted = {};\nexport let keyIsDisabled = {};\nexport let keyShiftCounter = {};\n\nconst KeyControls = () => {\n  window.addEventListener(\"keydown\", (event) => {\n    keyIsPressed[event.key] = true\n    if (event.key === \"Tab\") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    if (event.key === \" \") {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  });\n  window.addEventListener(\"keyup\", (event) => {\n    keyShiftCounter[event.key] = 0\n    keyIsPressed[event.key] = false\n    keyIsDisabled[event.key] = false;\n  });\n};\n\nexport default KeyControls;\n","import  styles  from \"./HowToPlay.module.css\";\n\nconst HowToPlay = () => {\n  return (\n    <div className={styles.howToPlay}>\n      <ul>\n        <li>esc = start game</li>\n        <li>q = rotate counter clockwise</li>\n        <li>w = rotate clockwise</li>\n        <li>tab = hold</li>\n        <li>spacebar = hard drop</li>\n        <li>use arrows to move</li>\n      </ul>\n    </div>\n  );\n};\n\nexport default HowToPlay;\n","import { Fragment, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport styles from \"./gameUI.module.css\";\n\nimport { gameStateActions } from \"./store/GameState\";\nimport Grid from \"./Components/Grid\";\nimport PieceQueue from \"./Components/PieceQueue\";\nimport HeldBlock from \"./Components/HeldBlock\";\n\nimport {keyShiftCounter,keyIsPressed,keyIsDisabled} from \"./modules/KeyControls\";\nimport KeyControls from \"./modules/KeyControls\"\nimport HowToPlay from \"./Components/HowToPlay\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  const gameRunning =  useSelector((state) => state.gameState.gameRunning);\n  const currentPieceState = useSelector((state) => state.gameState.currentPieceState);\n  const displayMessage = useSelector((state) => state.gameState.displayMessage);\n\n\n  const gameLoop = () => {\n    if (gameRunning) {\n      if (currentPieceState === \"FROZEN\") {\n        dispatch(gameStateActions.clearLines());\n        dispatch(gameStateActions.checkIfGameWon());\n        dispatch(gameStateActions.getNewPiece());\n        dispatch(gameStateActions.getGhostCoords());\n        dispatch(gameStateActions.showGhostPiece());\n      } else {\n        dispatch(gameStateActions.dropPiece());\n        dispatch(gameStateActions.getGhostCoords());\n        dispatch(gameStateActions.showGhostPiece());\n      }\n    }\n  };\n\n  useEffect(() => {\n    const dropPieceInterval = window.setInterval(() => {\n      gameLoop();\n    }, 300);\n    const handleInputInterval = window.setInterval(() => {\n      keyHandler();\n    }, 1);\n    const shiftInputInterval = window.setInterval(()=>{\n      keyShiftHandler();\n    },1)\n\n    return () => {\n      window.clearInterval(dropPieceInterval);\n      window.clearInterval(handleInputInterval);\n      window.clearInterval(shiftInputInterval);\n    };\n  });\n\n  useEffect(() => {\n    const interval = window.setInterval(() => {\n      dispatch(gameStateActions.gettingReady());\n    }, 500);\n    return () => {\n      window.clearInterval(interval);\n    };\n  }, [displayMessage, dispatch]);\n\n\n  const keyShiftHandler = () =>{\n    if (!gameRunning) {\n      return;\n    }\n    for (let key in keyShiftCounter){\n      if(keyShiftCounter[key]){\n        keyShiftCounter[key]+=1\n      }\n    }\n    if (keyIsPressed[\"ArrowDown\"]&&keyIsDisabled[\"ArrowDown\"]&&keyShiftCounter[\"ArrowDown\"]>40) {\n      console.log(\"down\");\n      dispatch(gameStateActions.dropPiece());\n      keyIsDisabled[\"ArrowDown\"] = true\n      keyShiftCounter[\"ArrowDown\"]=20\n    }\n    if (keyIsPressed[\"ArrowRight\"]&&keyIsDisabled[\"ArrowRight\"]&&keyShiftCounter[\"ArrowRight\"]>40) {\n      console.log(\"right\");\n      dispatch(gameStateActions.shiftRight());\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n      keyIsDisabled[\"ArrowRight\"] = true\n      keyShiftCounter[\"ArrowRight\"]=20\n    }\n    if (keyIsPressed[\"ArrowLeft\"]&&keyIsDisabled[\"ArrowLeft\"]&&keyShiftCounter[\"ArrowLeft\"]>40) {\n      console.log(\"left\");\n      dispatch(gameStateActions.shiftLeft());\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n      keyIsDisabled[\"ArrowLeft\"] = true\n      keyShiftCounter[\"ArrowLeft\"]=20\n    }\n\n  }\n  const keyHandler = () => {\n    if (!gameRunning) {\n      return;\n    }\n    if (keyIsPressed[\"q\"]&&!keyIsDisabled[\"q\"]) {\n      console.log(\"rotateLeft\");\n      dispatch(gameStateActions.rotatePiece(true));\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n      keyIsDisabled[\"q\"] = true\n    }\n    if (keyIsPressed[\"w\"]&&!keyIsDisabled[\"w\"]) {\n      console.log(\"rotateRight\");\n      dispatch(gameStateActions.rotatePiece(false));\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n      keyIsDisabled[\"w\"] = true\n    }\n    if (keyIsPressed[\" \"]&&!keyIsDisabled[\" \"]) {\n      dispatch(gameStateActions.hardDrop());\n      keyIsDisabled[\" \"] = true\n    }\n    if (keyIsPressed[\"Tab\"]&&!keyIsDisabled[\"Tab\"]) {\n      dispatch(gameStateActions.holdPiece());\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n      keyIsDisabled[\"Tab\"] = true\n    }\n    if (keyIsPressed[\"ArrowDown\"]&&!keyIsDisabled[\"ArrowDown\"]) {\n      dispatch(gameStateActions.dropPiece());\n      keyIsDisabled[\"ArrowDown\"] = true\n    }\n    if (keyIsPressed[\"ArrowRight\"]&&!keyIsDisabled[\"ArrowRight\"]) {\n      keyShiftCounter[\"ArrowRight\"] = 1\n      dispatch(gameStateActions.shiftRight());\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n      keyIsDisabled[\"ArrowRight\"] = true\n    }\n    if (keyIsPressed[\"ArrowLeft\"]&&!keyIsDisabled[\"ArrowLeft\"]) {\n      keyShiftCounter[\"ArrowLeft\"] = 1\n      dispatch(gameStateActions.shiftLeft());\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n      keyIsDisabled[\"ArrowLeft\"] = true\n    }\n  };\n  document.onkeydown = (keycode) => {\n    if (keycode.key === \"Escape\") {\n      dispatch(gameStateActions.newGame());\n      dispatch(gameStateActions.getNewPiece());\n      dispatch(gameStateActions.getGhostCoords());\n      dispatch(gameStateActions.showGhostPiece());\n    }\n  };\n  return (\n    <Fragment>\n      <KeyControls/>\n      <h1>Ditris</h1>\n      <div className={styles.gameUI}>\n        <HeldBlock />\n        <Grid></Grid>\n        <PieceQueue />\n      </div>\n      <HowToPlay></HowToPlay>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import {configureStore } from \"@reduxjs/toolkit\";\n\nimport gameStateReducer from './GameState'\n\n\n\n\nconst store = configureStore({\n    reducer:{gameState:gameStateReducer}\n})\n\nexport default store\n","import ReactDOM from \"react-dom/client\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <Provider store={store}>\n    {\" \"}\n    <App />\n  </Provider>\n);\n"],"sourceRoot":""}